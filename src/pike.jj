/**
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Modified by : Bill Welliver
 * Date: 8/2/05
 *
 * Original Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Pike grammar and actions that implement a front-end.
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
 // DEBUG_PARSER = true;
 // DEBUG_TOKEN_MANAGER = true;
 // DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(PikeParser)

import java.util.LinkedList;



public class PikeParser
{
static LinkedList typeParsingQueue = new LinkedList();
static LinkedList typeIdentifierQueue = new LinkedList();
static String var_def_type;
// modified main Andrea Gini 24/02/2002
// modified main. DW, 7/99
    public static void main (String [] args) {
        PikeParser parser;
        String filename = null;
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;
        LinkedList typeParsingQueue = new LinkedList();
        String var_def_type;
        
        if (args.length == 0)
        {
            System.out.println("Pike Parser Version 1.0:  Reading from standard input . . .");
            parser = new PikeParser(System.in);
        } else if (args.length == 1)
        {
            filename = args[0];
            System.out.println("Pike Parser Version 1.0:  Reading from file " + filename + " . . .");
            try
            {
                startTime = System.currentTimeMillis();
                parser = new PikeParser(new java.io.FileInputStream(filename));
                stopTime = System.currentTimeMillis();
                initTime = stopTime - startTime;
            } catch (java.io.FileNotFoundException e)
            {
                System.out.println("Pike Parser Version 1.0:  File " + filename + " not found.");
                return;
            }
        } else
        {
            System.out.println("Pike Parser Version 1.0:  Usage is one of:");
            System.out.println("         java PikeParser < inputfile");
            System.out.println("OR");
            System.out.println("         java PikeParser inputfile");
            return;
        }
        try
        {
            startTime = System.currentTimeMillis();
            parser.enable_tracing();
            parser.CompilationUnit();
            stopTime = System.currentTimeMillis();
            parseTime = stopTime - startTime;
            System.out.println("Pike Parser Version 1.0: ");
            System.out.println("   Pike program parsed " + filename + " successfully in " + (initTime + parseTime) + " ms.");
            System.out.println("      parser initialization time was " + initTime + " ms.");
            System.out.println("      parser parse time was " + parseTime + " ms.");
        } catch (ParseException e)
        {
            System.out.println(e.getMessage());
            System.out.println("Pike Parser Version 1.0:  Encountered errors during parse.");
        }
    }

}

PARSER_END(PikeParser)

TOKEN_MGR_DECLS :
{
  
}

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "//!" : IN_SINGLE_LINE_FORMAL_COMMENT
|
  <"/*!" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_FORMAL_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_SINGLE_LINE_FORMAL_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
< ARRAY: "array" >
| < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CLASS: "class" >
| < CONST: "constant" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < ELSE: "else" >
| < FINAL: "final" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < FUNCTION: "function" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPORT: "import" >
| < INHERIT: "inherit" >
| < INT: "int" >
| < MAPPING: "mapping" >
| < MIXED: "mixed" >
| < MULTISET: "multiset" >
| < OBJECT: "object" >
| < OPTIONAL: "optional" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "string" >
| < SWITCH: "switch" >
| < THIS: "this" >
| < THROW: "throw" >
| < VOID: "void" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      
      
      ("#" (" ")* "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"")
      |
      ("\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"")
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "_",
       "a"-"z",
       "A"-"Z"
      ]
  >
|
  < #DIGIT:
      [
        "0"-"9"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < OCTOTHORPE: "#" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < DOTDOT: ".." >
| < COLONCOLON: "::" >
| < INDIRECT: "->" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
}


/*****************************************
 * THE PIKE LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
{}
{
 Program()
}

void Program() :
{}
{
  (Definition())+
  <EOF>
}

void Definition() :
{}
{
	
  LOOKAHEAD(3)
  InheritDeclaration() 
  |
  LOOKAHEAD(3)
  ImportDeclaration() 
  |
  LOOKAHEAD(3)
  Constant()
  |
  LOOKAHEAD(400)
  Function()
  |
  LOOKAHEAD(3)
  VariableDeclaration()
  |
  LOOKAHEAD(3)
  ClassBodyDeclaration()	 
    
 
}

void VariableDeclaration() :
{}
{
  Modifiers() LocalVariableDeclaration() ";"	
}

void InheritDeclaration() :
{}
{
  Modifiers() "inherit" (Name() | <STRING_LITERAL>) (":" <IDENTIFIER>)? ";"
}

void ImportDeclaration() :
{}
{
  Modifiers() "import" (Name() | <STRING_LITERAL>) ";"
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( (Modifiers() "class")*)
  ClassDeclaration()
|
  ";"
}

void Constant() :
{}
{
	Modifiers()
	"constant"
	ConstantNames()
	";"
}

void ConstantNames() :
{}
{
  ConstantName() ("," ConstantName())*	
}

void ConstantName() :
{}
{
  <IDENTIFIER>
  "=" Expression()
  	
}

/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{}
{
  Modifiers()
  UnmodifiedClassDeclaration()
}

void Modifiers() :
{}
{
	( "private" | "static" | "public" | "optional" | "final" | "inline" | "local" | "nomask" | "protected" | "variant" )*
}

void UnmodifiedClassDeclaration() :
{}
{
  "class" <IDENTIFIER> [ "(" ImplicitConstructorDeclaration() ")" ]
  ClassBody()
}

void ClassBody() :
{}
{
  "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() :
{}
{
  ( "static" | "final" | "public" | "protected" | "private" )*
  UnmodifiedClassDeclaration()
}

void ClassBodyDeclaration() :
{}
{
  (LOOKAHEAD(2) LowClassBodyDeclaration())+
}

void LowClassBodyDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( FunctionLookahead() )
  Function()
|
  FieldDeclaration()
  {
     System.out.println(typeParsingQueue.removeLast().toString());
     System.out.println(typeParsingQueue.removeLast().toString());
  }
}

// This production is to determine lookahead only.
void FunctionLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" )*
  CompoundReturnType() <IDENTIFIER> "("
}


void FieldDeclaration() :
{}
{
  Modifiers()
  CompoundType()
  {    
  }
   VariableDeclarator() ( "," VariableDeclarator() )* (";")+
   {
     String x = "";
     while(typeIdentifierQueue.size()>0)
       x = x +   typeIdentifierQueue.removeLast();
     typeParsingQueue.add(x);
   }
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
  <IDENTIFIER> 
  {
    typeIdentifierQueue.add(token.image);
  }
}

void VariableInitializer() :
{}
{
  LOOKAHEAD(3)
  ArrayInitializer()
| 
  LOOKAHEAD(3)
  MappingInitializer()
|
  LOOKAHEAD(3)
  MultisetInitializer()  
|
  Expression()
}

void ArrayInitializer() :
{}
{
  "({" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] "})"
}

void MappingInitializer() :
{}
{
  <LPAREN> <LBRACKET> [ MappingEntry() ( LOOKAHEAD(2) "," MappingEntry() )* ] <RBRACKET> <RPAREN>
}

void MappingEntry() :
{}
{
  Expression() ":" VariableInitializer()
}

void MultisetInitializer() :
{}
{
  "(<" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] ">)"
}

void Function() :
{}
{
  Modifiers()
  CompoundReturnType() FunctionDeclarator() 
  ( Block() | ";" )
}

void ImplicitConstructorDeclaration() :
{}
{
  FormalParameters() 

}

void FunctionDeclarator() :
{}
{
  <IDENTIFIER> FormalParameters() 
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  CompoundParameterType() VariableDeclaratorId()
}

void Initializer() :
{}
{
  Block()
}


/*
 * Type, name and expression syntax follows.
 */

void CompoundParameterType() :
{}
{
   Type() 
   (LOOKAHEAD(2) "|" Type())* 

}

void CompoundType() :
{String s = "";}
{
   Type() 
     { s = s + token.image;}
   (LOOKAHEAD(2) "|" Type() {s = s + "|" + token.image; })* 
     {typeParsingQueue.add(s);}
}

void CompoundReturnType() :
{}
{
   ReturnType() (LOOKAHEAD(2) "|" ReturnType() )* 
}

void Type() :
{}
{
  ( Name() | PrimitiveSpecificType() )
}

void PrimitiveSpecificType() :
{}
{
  PrimitiveType() 
  ( "(" 
  
  CompoundType()   

   ")" )?
}

void ReturnType() :
{}
{
  ( PrimitiveSpecificType() | Name() )
}


void PrimitiveType() :
{}
{
  "string"
|
  "int"
|
  "float"
|
  "array"
|
  "mapping"
|
  "multiset"
|
  "function"
| 
  "object"
|
  "mixed"
|
  "void"
}

void Name() :
{}
{
  (<IDENTIFIER> ("." <IDENTIFIER>)*)
}

void Name2() :
{}
{
	LOOKAHEAD(2) InheritName() | Name()
}

void InheritName() :
{}
{
  
  (LOOKAHEAD(2) (<IDENTIFIER> "::" <IDENTIFIER>) | ("::" <IDENTIFIER>))
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="
}

void CatchExpression() :
{}
{
  (<CATCH>"(") ConditionalExpression()
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}


void RelationalExpression() :
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( "<<" | ">>" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(3)
  <LPAREN> PrimitiveType()
|
  <LPAREN> Name() <RPAREN> ( "~" | "!" | LOOKAHEAD(2) <LPAREN> | <IDENTIFIER> | Literal() )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Name2()
|	
  LOOKAHEAD(2) Literal()
|
  "(" Expression() ")"

}

void PrimarySuffix() :
{}
{
  Indexing()
|
  "->" <IDENTIFIER>
|
  Arguments()
}

void Indexing() :
{}
{
  <LBRACKET> Expression() <RBRACKET>
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  LOOKAHEAD(3)
  MultisetLiteral()
|
  MappingLiteral()
|
  ArrayLiteral()
}

void ArrayLiteral() :
{}
{
  "({" (ArgumentList()) "})"
}

void MappingLiteral() :
{}
{
  <LPAREN> <LBRACKET> (ArgumentList()) <RBRACKET> <RPAREN>
}

void MultisetLiteral() :
{}
{
  "(<" (ArgumentList()) ">)"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
    PrimitiveType()
|
  Name()
    (
        Arguments() [ ClassBody() ]
    )
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  CatchStatement()
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForeachStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()

}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  LOOKAHEAD(Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  LOOKAHEAD(Statement())
  Statement()
|
  UnmodifiedClassDeclaration()
|
  CatchBlock()
}

void CatchBlock() :
{}
{
  <CATCH> "{" ( BlockStatement() )* "}"
}


void LocalVariableDeclaration() :
{}
{
  Type() 
  VariableDeclarator() 
  (LOOKAHEAD(2)  "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void CatchStatement() :
{}
{
  <CATCH> "(" Expression() ")"
}


void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForeachStatement() :
{}
{
  "foreach" "(" [ ForInit() ] 
  (
  ";" [LOOKAHEAD(2) ForInit() ]
  |
  ","
  )

  LocalVariableDeclaration() ")" Statement()

}

void ForInit() :
{}
{
  LOOKAHEAD( Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() (LOOKAHEAD(2) "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}
