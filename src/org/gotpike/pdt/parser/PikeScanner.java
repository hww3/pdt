/* The following code was generated by JFlex 1.4.1 on 11/5/07 11:57 PM */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998,99 Gerwin Klein <kleing@informatik.tu-muenchen.de>.  *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note, that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a real world application (e.g. a Java compiler) this can 
   and should be optimized */

package org.gotpike.pdt.parser;
import java_cup.runtime.*;
import java.io.Reader;
import java.io.StringReader;
import org.eclipse.jface.text.IDocument;
import org.gotpike.pdt.model.SourceFile;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 11/5/07 11:57 PM from the specification file
 * <tt>/Users/hww3/Documents/workspace/PDT/src/pike.flex</tt>
 */
public class PikeScanner extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\3\1\1\16\11\4\0\1\3\1\6"+
    "\1\26\1\7\1\10\1\104\1\100\1\27\1\31\1\34\1\5\1\25"+
    "\1\72\1\77\1\23\1\4\1\12\1\20\2\17\4\21\2\13\1\76"+
    "\1\71\1\32\1\73\1\33\1\75\1\102\3\16\1\105\1\24\1\22"+
    "\5\10\1\14\13\10\1\15\2\10\1\67\1\30\1\70\1\103\1\10"+
    "\1\0\1\35\1\40\1\43\1\54\1\41\1\55\1\60\1\46\1\52"+
    "\1\62\1\42\1\47\1\56\1\51\1\50\1\57\1\10\1\36\1\44"+
    "\1\45\1\53\1\64\1\63\1\61\1\37\1\10\1\65\1\101\1\66"+
    "\1\74\41\11\2\0\4\10\4\0\1\10\2\0\1\11\7\0\1\10"+
    "\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u013f\10\31\0\162\10"+
    "\4\0\14\10\16\0\5\10\11\0\1\10\21\0\130\11\5\0\23\11"+
    "\12\0\1\10\13\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10"+
    "\1\0\54\10\1\0\46\10\1\0\5\10\4\0\202\10\1\0\4\11"+
    "\3\0\105\10\1\0\46\10\2\0\2\10\6\0\20\10\41\0\46\10"+
    "\2\0\1\10\7\0\47\10\11\0\21\11\1\0\27\11\1\0\3\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\13\0\33\10\5\0\3\10"+
    "\15\0\4\11\14\0\6\11\13\0\32\10\5\0\13\10\16\11\7\0"+
    "\12\11\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0\6\11"+
    "\2\10\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10\17\0"+
    "\1\11\1\10\1\11\36\10\33\11\2\0\3\10\60\0\46\10\13\11"+
    "\1\10\u014f\0\3\11\66\10\2\0\1\11\1\10\20\11\2\0\1\10"+
    "\4\11\3\0\12\10\2\11\2\0\12\11\21\0\3\11\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10"+
    "\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\11\0\1\11"+
    "\4\0\2\10\1\0\3\10\2\11\2\0\12\11\4\10\15\0\3\11"+
    "\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0\2\11"+
    "\2\0\3\11\13\0\4\10\1\0\1\10\7\0\14\11\3\10\14\0"+
    "\3\11\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\2\0\1\11\1\10\10\11\1\0\3\11\1\0"+
    "\3\11\2\0\1\10\17\0\2\10\2\11\2\0\12\11\1\0\1\10"+
    "\17\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\1\11\1\10\6\11\3\0\2\11"+
    "\2\0\3\11\10\0\2\11\4\0\2\10\1\0\3\10\4\0\12\11"+
    "\1\0\1\10\20\0\1\11\1\10\1\0\6\10\3\0\3\10\1\0"+
    "\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0"+
    "\3\10\3\0\10\10\1\0\3\10\4\0\5\11\3\0\3\11\1\0"+
    "\4\11\11\0\1\11\17\0\11\11\11\0\1\10\7\0\3\11\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\4\0"+
    "\7\11\1\0\3\11\1\0\4\11\7\0\2\11\11\0\2\10\4\0"+
    "\12\11\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0"+
    "\12\10\1\0\5\10\2\0\1\11\1\10\7\11\1\0\3\11\1\0"+
    "\4\11\7\0\2\11\7\0\1\10\1\0\2\10\4\0\12\11\22\0"+
    "\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\20\10\4\0"+
    "\6\11\2\0\3\11\1\0\4\11\11\0\1\11\10\0\2\10\4\0"+
    "\12\11\22\0\2\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0"+
    "\1\10\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0"+
    "\10\11\22\0\2\11\15\0\60\10\1\11\2\10\7\11\4\0\10\10"+
    "\10\11\1\0\12\11\47\0\2\10\1\0\1\10\2\0\2\10\1\0"+
    "\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0"+
    "\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\11\2\10\6\11"+
    "\1\0\2\11\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0"+
    "\12\11\2\0\2\10\42\0\1\10\27\0\2\11\6\0\12\11\13\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\2\11\10\10\1\0\42\10"+
    "\6\0\24\11\1\0\2\11\4\10\4\0\10\11\1\0\44\11\11\0"+
    "\1\11\71\0\42\10\1\0\5\10\1\0\2\10\1\0\7\11\3\0"+
    "\4\11\6\0\12\11\6\0\6\10\4\11\106\0\46\10\12\0\51\10"+
    "\7\0\132\10\5\0\104\10\5\0\122\10\6\0\7\10\1\0\77\10"+
    "\1\0\1\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\47\10\1\0\1\10\1\0\4\10\2\0\37\10\1\0\1\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\7\10"+
    "\1\0\7\10\1\0\27\10\1\0\37\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\47\10\1\0\23\10\16\0\11\11\56\0\125\10"+
    "\14\0\u026c\10\2\0\10\10\12\0\32\10\5\0\113\10\3\0\3\10"+
    "\17\0\15\10\1\0\4\10\3\11\13\0\22\10\3\11\13\0\22\10"+
    "\2\11\14\0\15\10\1\0\3\10\1\0\2\11\14\0\64\10\40\11"+
    "\3\0\1\10\3\0\2\10\1\11\2\0\12\11\41\0\3\11\2\0"+
    "\12\11\6\0\130\10\10\0\51\10\1\11\126\0\35\10\3\0\14\11"+
    "\4\0\14\11\12\0\12\11\36\10\2\0\5\10\u038b\0\154\10\224\0"+
    "\234\10\4\0\132\10\6\0\26\10\2\0\6\10\2\0\46\10\2\0"+
    "\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0"+
    "\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0"+
    "\7\10\17\0\4\11\32\0\5\11\20\0\2\10\23\0\1\10\13\0"+
    "\4\11\6\0\6\11\1\0\1\10\15\0\1\10\40\0\22\10\36\0"+
    "\15\11\4\0\1\11\3\0\6\11\27\0\1\10\4\0\1\10\2\0"+
    "\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\4\10\1\0\3\10\1\0\7\10\3\0\3\10\5\0"+
    "\5\10\26\0\44\10\u0e81\0\3\10\31\0\11\10\6\11\1\0\5\10"+
    "\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0\137\10"+
    "\5\0\50\10\4\0\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51a6\10\132\0\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10"+
    "\225\0\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0\15\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10"+
    "\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\11"+
    "\20\0\4\11\17\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10"+
    "\1\0\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0\32\10"+
    "\4\0\1\10\1\0\32\10\12\0\132\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\11"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\21\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\1\1\33\1\34\1\35"+
    "\1\36\1\1\1\37\2\40\1\41\2\1\2\42\1\1"+
    "\2\0\1\43\1\44\1\45\1\46\1\47\1\50\1\0"+
    "\3\46\1\51\1\47\1\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\17\6\1\64"+
    "\2\6\1\65\15\6\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\2\101\1\102"+
    "\2\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\11\102\1\0\1\115\2\116\2\46\1\47"+
    "\1\0\1\117\1\120\1\121\20\6\1\122\4\6\1\123"+
    "\14\6\1\103\1\0\1\124\1\0\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\1\0\1\134\1\116\2\46"+
    "\3\6\1\135\1\136\34\6\1\137\1\0\1\116\2\46"+
    "\1\140\1\6\1\141\1\142\1\143\15\6\1\144\1\6"+
    "\1\145\2\6\1\146\4\6\1\147\1\150\1\6\1\101"+
    "\1\116\2\46\1\151\2\6\1\152\1\153\1\154\1\155"+
    "\1\156\1\157\1\6\1\160\1\6\1\161\7\6\1\162"+
    "\1\6\1\116\2\46\3\6\1\163\1\164\1\165\1\6"+
    "\1\166\2\6\1\167\1\170\1\116\2\46\1\171\1\172"+
    "\1\173\1\174\1\175\1\6\1\116\2\46\1\176\1\116"+
    "\2\46\1\0\2\46\1\0\2\46\1\0\2\46\1\0"+
    "\2\46\1\0\2\46\1\0\2\46\1\0\1\46\1\47"+
    "\1\0\5\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u0118\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u0118"+
    "\0\u0118\0\u03d4\0\u041a\0\u0460\0\u0118\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u094c\0\u0118\0\u0118\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0118\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u0118\0\u0118\0\u0c08\0\u0c4e\0\u0c94\0\u0118\0\u0cda"+
    "\0\u0b36\0\u0d20\0\u0118\0\u0118\0\u0118\0\u0d66\0\u0dac\0\u0118"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0118\0\u0f0a\0\u0f50\0\u0118"+
    "\0\u0f96\0\u0118\0\u0118\0\u0118\0\u0fdc\0\u0118\0\u1022\0\u0118"+
    "\0\u0118\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u0276\0\u1482\0\u14c8\0\u0276\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u189c\0\u0118\0\u0118\0\u18e2"+
    "\0\u1928\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u0118\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u0118\0\u0118\0\u0118\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u0276\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u0118\0\u19b4\0\u0118\0\u26d4\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u271a\0\u0118\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\u0276\0\u0276\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0"+
    "\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0"+
    "\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020"+
    "\0\u3066\0\u0276\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u0276\0\u31c4"+
    "\0\u0276\0\u0276\0\u0276\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u0276\0\u3598\0\u0276\0\u35de\0\u3624\0\u0276\0\u366a\0\u36b0"+
    "\0\u36f6\0\u373c\0\u0276\0\u0276\0\u3782\0\u1be4\0\u37c8\0\u380e"+
    "\0\u3854\0\u0276\0\u389a\0\u38e0\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u0276\0\u0276\0\u3926\0\u0276\0\u396c\0\u0276\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u0276\0\u3b9c\0\u3be2"+
    "\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u0276\0\u0276\0\u0276"+
    "\0\u3d86\0\u0276\0\u3dcc\0\u3e12\0\u0276\0\u0276\0\u3e58\0\u3e9e"+
    "\0\u3ee4\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u0276\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a"+
    "\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\5\1\14\1\15\3\13\3\15\1\13\1\16\1\13"+
    "\1\17\1\20\1\21\1\5\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\13\1\30\1\31\1\13\1\32\1\33"+
    "\2\13\1\34\1\35\1\36\1\37\1\13\1\40\1\41"+
    "\1\42\1\43\1\44\2\13\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\13\1\5"+
    "\1\6\2\7\1\10\1\11\1\12\1\67\1\13\1\5"+
    "\1\14\1\15\3\13\3\15\1\13\1\16\1\13\1\17"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\13\1\30\1\31\1\13\1\32\1\33\2\13"+
    "\1\34\1\35\1\36\1\37\1\13\1\40\1\41\1\42"+
    "\1\43\1\44\2\13\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\13\1\70\1\71"+
    "\1\72\23\70\1\73\1\70\1\74\55\70\1\75\1\76"+
    "\1\77\24\75\1\5\1\100\55\75\110\0\1\7\107\0"+
    "\1\101\1\102\65\0\1\103\105\0\1\104\105\0\1\105"+
    "\22\0\13\13\1\0\1\13\10\0\30\13\20\0\1\13"+
    "\12\0\1\106\1\107\1\110\1\111\1\0\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\14\0\1\117\5\0\1\110"+
    "\4\0\1\120\1\115\3\0\1\111\23\0\1\120\12\0"+
    "\2\15\1\110\2\0\3\15\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\110\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\2\116\3\0\3\116\1\0\1\121\107\0\1\122"+
    "\45\0\1\123\44\0\1\124\105\0\1\125\40\0\1\126"+
    "\45\0\1\127\1\130\36\0\1\131\22\0\13\13\1\0"+
    "\1\13\10\0\1\13\1\132\26\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\4\13\1\133\23\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\1\13\1\134"+
    "\26\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\12\13\1\135\15\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\1\136\11\13\1\137\1\140\14\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\7\13\1\141"+
    "\1\142\15\13\1\143\1\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\1\144\27\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\3\13\1\145\16\13\1\146"+
    "\5\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\13\13\1\147\14\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\14\13\1\150\3\13\1\151\1\152\6\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\4\13"+
    "\1\153\6\13\1\154\14\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\12\13\1\155\1\156\1\13\1\157"+
    "\1\160\11\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\1\161\14\13\1\162\1\163\11\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\1\13\1\164\14\13"+
    "\1\165\11\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\1\166\27\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\11\13\1\167\16\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\1\170\12\13\1\171\14\13"+
    "\20\0\1\13\73\0\1\172\110\0\1\173\42\0\1\174"+
    "\37\0\1\175\3\0\1\176\101\0\1\177\4\0\1\200"+
    "\100\0\1\201\5\0\1\202\77\0\1\203\105\0\1\204"+
    "\12\0\1\101\1\205\1\206\103\101\1\70\2\0\23\70"+
    "\1\0\1\70\1\0\55\70\2\0\1\72\103\0\2\207"+
    "\1\0\7\207\1\210\4\207\2\210\1\211\4\207\1\212"+
    "\1\213\1\214\5\207\1\215\1\207\1\216\4\207\1\217"+
    "\3\207\1\220\3\207\1\221\30\207\27\0\1\222\60\0"+
    "\1\77\103\0\2\207\1\0\7\207\1\223\4\207\2\223"+
    "\1\224\4\207\1\225\1\226\1\227\5\207\1\230\1\207"+
    "\1\231\4\207\1\232\3\207\1\232\3\207\1\233\30\207"+
    "\5\234\1\0\100\234\12\0\1\106\1\107\1\235\2\0"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\14\0\1\117"+
    "\5\0\1\235\4\0\1\120\1\115\27\0\1\120\12\0"+
    "\2\107\3\0\3\107\1\115\1\116\1\117\14\0\1\117"+
    "\12\0\1\120\1\115\27\0\1\120\12\0\1\236\1\237"+
    "\2\0\5\237\1\0\1\237\10\0\1\237\2\0\2\237"+
    "\1\0\1\237\10\0\2\237\27\0\1\237\12\0\1\240"+
    "\1\107\1\235\2\0\3\240\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\1\114\1\107\1\235\2\0\3\114\1\115\1\116"+
    "\1\117\14\0\1\117\5\0\1\235\4\0\1\120\1\115"+
    "\27\0\1\120\12\0\1\241\1\107\1\235\2\0\3\241"+
    "\1\115\1\116\1\117\14\0\1\117\5\0\1\235\4\0"+
    "\1\120\1\115\27\0\1\120\12\0\2\116\3\0\3\116"+
    "\1\115\1\0\1\117\14\0\1\117\12\0\1\120\1\115"+
    "\27\0\1\120\12\0\2\242\3\0\3\242\3\0\1\243"+
    "\51\0\1\243\31\0\1\244\155\0\1\245\105\0\1\246"+
    "\22\0\13\13\1\0\1\13\10\0\1\13\1\247\26\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\10\13"+
    "\1\250\17\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\4\13\1\251\23\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\7\13\1\252\20\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\7\13\1\253\1\254"+
    "\17\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\1\255\27\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\14\13\1\256\13\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\6\13\1\257\21\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\1\260\1\261\26\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\15\13"+
    "\1\262\12\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\21\13\1\263\6\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\25\13\1\264\2\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\10\13\1\265\17\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\21\13"+
    "\1\266\6\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\10\13\1\267\1\270\16\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\22\13\1\271\5\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\20\13\1\272"+
    "\7\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\13\13\1\273\14\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\1\13\1\274\26\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\14\13\1\275\13\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\14\13\1\276"+
    "\13\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\22\13\1\277\5\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\24\13\1\300\3\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\12\13\1\301\15\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\13\13\1\302"+
    "\1\13\1\303\12\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\3\13\1\304\24\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\16\13\1\305\11\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\15\13\1\306"+
    "\12\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\1\13\1\307\26\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\15\13\1\310\12\13\20\0\1\13\2\0"+
    "\1\206\115\0\1\211\4\0\3\211\76\0\1\311\4\0"+
    "\3\311\76\0\1\312\4\0\3\312\5\0\1\313\70\0"+
    "\1\314\4\0\3\314\5\0\1\313\105\0\1\315\105\0"+
    "\1\316\105\0\1\317\105\0\1\320\105\0\1\321\105\0"+
    "\1\322\105\0\1\323\56\0\5\234\1\324\100\234\12\0"+
    "\1\236\1\237\1\325\1\0\5\237\1\0\1\237\10\0"+
    "\1\237\2\0\2\237\1\0\1\237\3\0\1\325\4\0"+
    "\2\237\27\0\1\237\12\0\2\326\1\325\1\0\5\326"+
    "\1\0\1\326\10\0\1\326\2\0\2\326\1\0\1\326"+
    "\3\0\1\325\4\0\2\326\27\0\1\326\12\0\1\327"+
    "\1\107\1\235\2\0\3\327\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\1\330\1\107\1\235\2\0\3\330\1\115\1\116"+
    "\1\117\14\0\1\117\5\0\1\235\4\0\1\120\1\115"+
    "\27\0\1\120\12\0\2\242\3\0\3\242\1\115\31\0"+
    "\1\120\1\115\27\0\1\120\12\0\2\242\3\0\3\242"+
    "\74\0\13\13\1\0\1\13\10\0\1\331\27\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\16\13\1\332"+
    "\11\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\1\333\27\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\4\13\1\334\23\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\4\13\1\335\23\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\6\13\1\336\21\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\7\13"+
    "\1\337\20\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\7\13\1\340\1\341\17\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\1\342\27\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\10\13\1\343\17\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\15\13"+
    "\1\344\12\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\10\13\1\345\17\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\3\13\1\346\24\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\4\13\1\347\23\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\15\13"+
    "\1\350\12\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\1\351\27\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\4\13\1\352\23\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\13\13\1\353\14\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\1\354\27\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\1\355"+
    "\27\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\4\13\1\356\23\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\1\357\27\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\6\13\1\360\21\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\22\13\1\361\5\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\4\13"+
    "\1\362\23\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\10\13\1\363\17\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\10\13\1\364\17\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\27\13\1\365\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\12\13\1\366"+
    "\15\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\23\13\1\367\4\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\12\13\1\370\15\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\15\13\1\371\12\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\17\13\1\372"+
    "\10\13\20\0\1\13\27\0\1\313\56\0\4\234\1\206"+
    "\1\373\1\0\77\234\12\0\2\374\1\325\1\0\5\374"+
    "\1\0\1\374\10\0\1\374\2\0\2\374\1\0\1\374"+
    "\3\0\1\325\4\0\2\374\27\0\1\374\12\0\1\375"+
    "\1\107\1\235\2\0\3\375\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\1\376\1\107\1\235\2\0\3\376\1\115\1\116"+
    "\1\117\14\0\1\117\5\0\1\235\4\0\1\120\1\115"+
    "\27\0\1\120\10\0\13\13\1\0\1\13\10\0\2\13"+
    "\1\377\25\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\1\13\1\u0100\26\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\5\13\1\u0101\22\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\11\13\1\u0102\16\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\7\13"+
    "\1\u0103\20\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\10\13\1\u0104\17\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\15\13\1\u0105\12\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\14\13\1\u0106\13\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\15\13"+
    "\1\u0107\12\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\14\13\1\u0108\13\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\6\13\1\u0109\21\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\17\13\1\u010a\10\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\6\13"+
    "\1\u010b\21\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\13\13\1\u010c\14\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\7\13\1\u010d\20\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\1\13\1\u010e\26\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\1\13"+
    "\1\u010f\26\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\16\13\1\u0110\11\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\10\13\1\u0111\17\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\1\u0112\27\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\12\13\1\u0113"+
    "\15\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\10\13\1\u0114\17\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\15\13\1\u0115\12\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\17\13\1\u0116\10\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\15\13\1\u0117"+
    "\12\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\4\13\1\u0118\23\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\1\u0119\27\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\15\13\1\u011a\12\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\4\13\1\u011b\23\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\4\13"+
    "\1\u011c\23\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\1\u011d\27\13\20\0\1\13\4\234\1\u011e\1\373"+
    "\100\234\12\0\2\u011f\1\325\1\0\5\u011f\1\0\1\u011f"+
    "\10\0\1\u011f\2\0\2\u011f\1\0\1\u011f\3\0\1\325"+
    "\4\0\2\u011f\27\0\1\u011f\12\0\1\u0120\1\107\1\235"+
    "\2\0\3\u0120\1\115\1\116\1\117\14\0\1\117\5\0"+
    "\1\235\4\0\1\120\1\115\27\0\1\120\12\0\1\u0121"+
    "\1\107\1\235\2\0\3\u0121\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\10\0\13\13\1\0\1\13\10\0\14\13\1\u0122\13\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\1\u0123"+
    "\27\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\14\13\1\u0124\13\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\20\13\1\u0125\7\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\6\13\1\u0126\21\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\23\13\1\u0127"+
    "\4\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\11\13\1\u0128\16\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\1\u0129\27\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\10\13\1\u012a\17\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\14\13\1\u012b\13\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\5\13"+
    "\1\u012c\22\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\15\13\1\u012d\12\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\10\13\1\u012e\17\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\12\13\1\u012f\15\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\6\13"+
    "\1\u0130\21\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\15\13\1\u0131\12\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\14\13\1\u0132\13\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\7\13\1\u0133\20\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\6\13"+
    "\1\u0134\21\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\10\13\1\u0135\17\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\6\13\1\u0136\21\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\14\13\1\u0137\13\13"+
    "\20\0\1\13\12\0\2\u0138\1\325\1\0\5\u0138\1\0"+
    "\1\u0138\10\0\1\u0138\2\0\2\u0138\1\0\1\u0138\3\0"+
    "\1\325\4\0\2\u0138\27\0\1\u0138\12\0\1\u0139\1\107"+
    "\1\235\2\0\3\u0139\1\115\1\116\1\117\14\0\1\117"+
    "\5\0\1\235\4\0\1\120\1\115\27\0\1\120\12\0"+
    "\1\u013a\1\107\1\235\2\0\3\u013a\1\115\1\116\1\117"+
    "\14\0\1\117\5\0\1\235\4\0\1\120\1\115\27\0"+
    "\1\120\10\0\13\13\1\0\1\13\10\0\14\13\1\u013b"+
    "\13\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\16\13\1\u013c\11\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\1\u013d\27\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\10\13\1\u013e\17\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\10\13\1\u013f\17\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\11\13"+
    "\1\u0140\16\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\13\13\1\u0141\14\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\23\13\1\u0142\4\13\20\0\1\13"+
    "\10\0\13\13\1\0\1\13\10\0\4\13\1\u0143\23\13"+
    "\20\0\1\13\10\0\13\13\1\0\1\13\10\0\10\13"+
    "\1\u0144\17\13\20\0\1\13\10\0\13\13\1\0\1\13"+
    "\10\0\4\13\1\u0145\23\13\20\0\1\13\10\0\13\13"+
    "\1\0\1\13\10\0\10\13\1\u0146\17\13\20\0\1\13"+
    "\12\0\2\u0147\1\325\1\0\5\u0147\1\0\1\u0147\10\0"+
    "\1\u0147\2\0\2\u0147\1\0\1\u0147\3\0\1\325\4\0"+
    "\2\u0147\27\0\1\u0147\12\0\1\u0148\1\107\1\235\2\0"+
    "\3\u0148\1\115\1\116\1\117\14\0\1\117\5\0\1\235"+
    "\4\0\1\120\1\115\27\0\1\120\12\0\1\u0149\1\107"+
    "\1\235\2\0\3\u0149\1\115\1\116\1\117\14\0\1\117"+
    "\5\0\1\235\4\0\1\120\1\115\27\0\1\120\10\0"+
    "\13\13\1\0\1\13\10\0\10\13\1\u014a\17\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\4\13\1\u014b"+
    "\23\13\20\0\1\13\10\0\13\13\1\0\1\13\10\0"+
    "\12\13\1\u014c\15\13\20\0\1\13\10\0\13\13\1\0"+
    "\1\13\10\0\14\13\1\u014d\13\13\20\0\1\13\10\0"+
    "\13\13\1\0\1\13\10\0\10\13\1\u014e\17\13\20\0"+
    "\1\13\10\0\13\13\1\0\1\13\10\0\4\13\1\u014f"+
    "\23\13\20\0\1\13\12\0\2\u0150\1\325\1\0\5\u0150"+
    "\1\0\1\u0150\10\0\1\u0150\2\0\2\u0150\1\0\1\u0150"+
    "\3\0\1\325\4\0\2\u0150\27\0\1\u0150\12\0\1\u0151"+
    "\1\107\1\235\2\0\3\u0151\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\1\u0152\1\107\1\235\2\0\3\u0152\1\115\1\116"+
    "\1\117\14\0\1\117\5\0\1\235\4\0\1\120\1\115"+
    "\27\0\1\120\10\0\13\13\1\0\1\13\10\0\17\13"+
    "\1\u0153\10\13\20\0\1\13\12\0\2\u0154\1\325\1\0"+
    "\5\u0154\1\0\1\u0154\10\0\1\u0154\2\0\2\u0154\1\0"+
    "\1\u0154\3\0\1\325\4\0\2\u0154\27\0\1\u0154\12\0"+
    "\1\u0155\1\107\1\235\2\0\3\u0155\1\115\1\116\1\117"+
    "\14\0\1\117\5\0\1\235\4\0\1\120\1\115\27\0"+
    "\1\120\12\0\1\u0156\1\107\1\235\2\0\3\u0156\1\115"+
    "\1\116\1\117\14\0\1\117\5\0\1\235\4\0\1\120"+
    "\1\115\27\0\1\120\12\0\2\u0157\1\325\1\0\5\u0157"+
    "\1\0\1\u0157\10\0\1\u0157\2\0\2\u0157\1\0\1\u0157"+
    "\3\0\1\325\4\0\2\u0157\27\0\1\u0157\12\0\1\u0158"+
    "\1\107\1\235\2\0\3\u0158\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\1\u0159\1\107\1\235\2\0\3\u0159\1\115\1\116"+
    "\1\117\14\0\1\117\5\0\1\235\4\0\1\120\1\115"+
    "\27\0\1\120\12\0\2\u015a\1\325\1\0\5\u015a\1\0"+
    "\1\u015a\10\0\1\u015a\2\0\2\u015a\1\0\1\u015a\3\0"+
    "\1\325\4\0\2\u015a\27\0\1\u015a\12\0\1\u015b\1\107"+
    "\1\235\2\0\3\u015b\1\115\1\116\1\117\14\0\1\117"+
    "\5\0\1\235\4\0\1\120\1\115\27\0\1\120\12\0"+
    "\1\u015c\1\107\1\235\2\0\3\u015c\1\115\1\116\1\117"+
    "\14\0\1\117\5\0\1\235\4\0\1\120\1\115\27\0"+
    "\1\120\12\0\2\u015d\1\325\1\0\5\u015d\1\0\1\u015d"+
    "\10\0\1\u015d\2\0\2\u015d\1\0\1\u015d\3\0\1\325"+
    "\4\0\2\u015d\27\0\1\u015d\12\0\1\u015e\1\107\1\235"+
    "\2\0\3\u015e\1\115\1\116\1\117\14\0\1\117\5\0"+
    "\1\235\4\0\1\120\1\115\27\0\1\120\12\0\1\u015f"+
    "\1\107\1\235\2\0\3\u015f\1\115\1\116\1\117\14\0"+
    "\1\117\5\0\1\235\4\0\1\120\1\115\27\0\1\120"+
    "\12\0\2\u0160\1\325\1\0\5\u0160\1\0\1\u0160\10\0"+
    "\1\u0160\2\0\2\u0160\1\0\1\u0160\3\0\1\325\4\0"+
    "\2\u0160\27\0\1\u0160\12\0\1\u0161\1\107\1\235\2\0"+
    "\3\u0161\1\115\1\116\1\117\14\0\1\117\5\0\1\235"+
    "\4\0\1\120\1\115\27\0\1\120\12\0\1\u0162\1\107"+
    "\1\235\2\0\3\u0162\1\115\1\116\1\117\14\0\1\117"+
    "\5\0\1\235\4\0\1\120\1\115\27\0\1\120\12\0"+
    "\2\u0163\1\325\1\0\5\u0163\1\0\1\u0163\10\0\1\u0163"+
    "\2\0\2\u0163\1\0\1\u0163\3\0\1\325\4\0\2\u0163"+
    "\27\0\1\u0163\12\0\1\u0164\1\107\1\235\2\0\3\u0164"+
    "\1\115\1\116\1\117\14\0\1\117\5\0\1\235\4\0"+
    "\1\120\1\115\27\0\1\120\12\0\1\u0165\1\107\1\235"+
    "\2\0\3\u0165\1\115\1\116\1\117\14\0\1\117\5\0"+
    "\1\235\4\0\1\120\1\115\27\0\1\120\12\0\2\u0166"+
    "\1\325\1\0\5\u0166\1\0\1\u0166\10\0\1\u0166\2\0"+
    "\2\u0166\1\0\1\u0166\3\0\1\325\4\0\2\u0166\27\0"+
    "\1\u0166\12\0\1\u0167\1\107\1\235\2\0\3\u0167\1\115"+
    "\1\116\1\117\14\0\1\117\5\0\1\235\4\0\1\120"+
    "\1\115\27\0\1\120\12\0\1\u0168\1\107\1\235\2\0"+
    "\3\u0168\1\115\1\116\1\117\14\0\1\117\5\0\1\235"+
    "\4\0\1\120\1\115\27\0\1\120\12\0\2\u0169\1\325"+
    "\1\0\5\u0169\1\0\1\u0169\10\0\1\u0169\2\0\2\u0169"+
    "\1\0\1\u0169\3\0\1\325\4\0\2\u0169\27\0\1\u0169"+
    "\12\0\1\u016a\1\107\1\235\2\0\3\u016a\1\115\1\116"+
    "\1\117\14\0\1\117\5\0\1\235\4\0\1\120\1\115"+
    "\27\0\1\120\12\0\1\u016b\1\107\1\235\2\0\3\u016b"+
    "\1\115\1\116\1\117\14\0\1\117\5\0\1\235\4\0"+
    "\1\120\1\115\27\0\1\120\12\0\2\u016c\1\325\1\0"+
    "\5\u016c\1\0\1\u016c\10\0\1\u016c\2\0\2\u016c\1\0"+
    "\1\u016c\3\0\1\325\4\0\2\u016c\27\0\1\u016c\12\0"+
    "\1\u016d\1\107\1\235\2\0\3\u016d\1\115\1\116\1\117"+
    "\14\0\1\117\5\0\1\235\4\0\1\120\1\115\27\0"+
    "\1\120\14\0\1\325\32\0\1\325\50\0\1\u016e\1\107"+
    "\1\235\2\0\3\u016e\1\115\1\116\1\117\14\0\1\117"+
    "\5\0\1\235\4\0\1\120\1\115\27\0\1\120\12\0"+
    "\1\u016f\1\107\1\235\2\0\3\u016f\1\115\1\116\1\117"+
    "\14\0\1\117\5\0\1\235\4\0\1\120\1\115\27\0"+
    "\1\120\12\0\1\u0170\1\107\1\235\2\0\3\u0170\1\115"+
    "\1\116\1\117\14\0\1\117\5\0\1\235\4\0\1\120"+
    "\1\115\27\0\1\120\12\0\1\u0171\1\107\1\235\2\0"+
    "\3\u0171\1\115\1\116\1\117\14\0\1\117\5\0\1\235"+
    "\4\0\1\120\1\115\27\0\1\120\12\0\2\107\1\235"+
    "\2\0\3\107\1\115\1\116\1\117\14\0\1\117\5\0"+
    "\1\235\4\0\1\120\1\115\27\0\1\120";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\10\1\2\11\3\1\1\11"+
    "\21\1\6\11\1\1\2\11\4\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\2\0\3\11\2\1\1\11\1\0"+
    "\3\1\1\11\1\1\1\0\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\2\11\40\1\13\11\1\1\2\11\2\1"+
    "\11\11\11\1\1\0\1\11\5\1\1\0\3\11\42\1"+
    "\1\11\1\0\1\11\1\0\7\11\1\0\1\11\45\1"+
    "\1\0\133\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public String filename = null;
  public SourceFile source = null;
  
  public PikeScanner(java.io.Reader in, String filename, SourceFile source)
  {
    this.filename = filename;
    this.zzReader = in;
    this.source = source;
  }
  
  public PikeScanner(java.io.Reader in, String filename)
  {
    this.filename = filename;
    this.zzReader = in;
  }
  
  public PikeScanner()
  {
  }
  
  public void yyerror(String message)
  { 
     report_error(message, null);
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Lexer Error ");
 	  String filename = (this.filename!=null)?this.filename:"-";
      int severity = 0;
      
      if(source != null)
        source.reportError(message, filename, (getYyline()+1), getYycolumn(), severity);
  

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "(" +info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public int getYycolumn()
  {
    return yycolumn;
  }

  public int getYyline()
  {
    return yyline;
  }
  
  private int getStartOffset(CurlySymbol parseStartCurly)
  {
      return parseStartCurly != null ? parseStartCurly.getOffset() : 0;
  }
  

 public void reset(
        Reader reader,
        IDocument doc,
        CurlySymbol parseStartCurly)
    {
        this.doc = doc;
		this.zzReader = reader;
		if(reader == null && doc != null)
		  this.zzReader = new StringReader(doc.get());
        if (parseStartCurly != null) level = parseStartCurly.getLevel();
    }


  int level = 0;
  IDocument doc;
  
  StringBuffer string = new StringBuffer();
  
  private PikeSymbol symbol(int type) {
    return new PikeSymbol(type, yyline+1, yycolumn+1, yychar, new PikeSymbol(type, yyline+1, yycolumn+1, yychar));
  }

  private PikeSymbol symbol(int type, Object value) {
    return new PikeSymbol(type, yyline+1, yycolumn+1, yychar, new PikeSymbol(type, yyline+1, yycolumn+1, yychar,value));
  }

  private CurlySymbol curlysymbol(int type) {
    int _level = level; 
    if(type == LBRACE) level++;
    else level--; 
    return new CurlySymbol(type, yyline+1, yycolumn+1, yychar, new CurlySymbol(type, yyline+1, yycolumn+1, yychar,_level));
  }

  public int getCurlyLevel()
  {
    return level;
  }
  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int  max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit  = Character.digit(zzBuffer[i],radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PikeScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PikeScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { return symbol(TOK_DEC);
          }
        case 127: break;
        case 29: 
          { return symbol(XOR);
          }
        case 128: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+yyline+", column "+yycolumn);
          }
        case 129: break;
        case 14: 
          { return symbol(GT);
          }
        case 130: break;
        case 110: 
          { return symbol(TOK_LAMBDA);
          }
        case 131: break;
        case 10: 
          { yybegin(STRING); string.setLength(0);
          }
        case 132: break;
        case 45: 
          { return symbol(TOK_ADD_EQ);
          }
        case 133: break;
        case 121: 
          { return symbol(TOK_CONSTANT);
          }
        case 134: break;
        case 22: 
          { return symbol(EQ);
          }
        case 135: break;
        case 57: 
          { return symbol(TOK_SUB_EQ);
          }
        case 136: break;
        case 56: 
          { return symbol(TOK_ARROW);
          }
        case 137: break;
        case 109: 
          { return symbol(TOK_SWITCH);
          }
        case 138: break;
        case 78: 
          { return symbol(TOK_NUMBER, new Integer((int) parseLong(yytext().substring(2),16)));
          }
        case 139: break;
        case 123: 
          { return symbol(TOK_OPTIONAL);
          }
        case 140: break;
        case 90: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\t'));
          }
        case 141: break;
        case 118: 
          { return symbol(TOK_MAPPING_ID);
          }
        case 142: break;
        case 61: 
          { return symbol(TOK_OR_EQ);
          }
        case 143: break;
        case 13: 
          { return symbol(LT);
          }
        case 144: break;
        case 108: 
          { return symbol(TOK_STRING_ID);
          }
        case 145: break;
        case 80: 
          { return symbol(TOK_LSH_EQ);
          }
        case 146: break;
        case 73: 
          { string.append( '\t' );
          }
        case 147: break;
        case 103: 
          { return symbol(TOK_GAUGE);
          }
        case 148: break;
        case 84: 
          { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(TOK_NUMBER, new Character((char)val));
          }
        case 149: break;
        case 94: 
          { return symbol(TOK_CASE);
          }
        case 150: break;
        case 119: 
          { return symbol(TOK_PRIVATE);
          }
        case 151: break;
        case 113: 
          { return symbol(TOK_IMPORT);
          }
        case 152: break;
        case 46: 
          { return symbol(TOK_MULTISET_START);
          }
        case 153: break;
        case 11: 
          { yybegin(CHARLITERAL);
          }
        case 154: break;
        case 39: 
          { return symbol(TOK_FLOAT, new Double(yytext()));
          }
        case 155: break;
        case 59: 
          { return symbol(TOK_AND_EQ);
          }
        case 156: break;
        case 122: 
          { return symbol(TOK_CONTINUE);
          }
        case 157: break;
        case 27: 
          { return symbol(OR);
          }
        case 158: break;
        case 9: 
          { return symbol(PLUS);
          }
        case 159: break;
        case 62: 
          { return symbol(TOK_LOR);
          }
        case 160: break;
        case 117: 
          { return symbol(TOK_FOREACH);
          }
        case 161: break;
        case 74: 
          { string.append( '\n' );
          }
        case 162: break;
        case 44: 
          { return symbol(TOK_INC);
          }
        case 163: break;
        case 99: 
          { return symbol(TOK_CLASS);
          }
        case 164: break;
        case 111: 
          { return symbol(TOK_OBJECT_ID);
          }
        case 165: break;
        case 15: 
          { return symbol(RPAREN);
          }
        case 166: break;
        case 35: 
          { return symbol(TOK_DIV_EQ);
          }
        case 167: break;
        case 6: 
          { return symbol(TOK_IDENTIFIER, yytext());
          }
        case 168: break;
        case 40: 
          { return symbol(TOK_NUMBER, new Long(yytext().substring(0,yylength()-1)));
          }
        case 169: break;
        case 116: 
          { return symbol(TOK_DEFAULT);
          }
        case 170: break;
        case 79: 
          { return symbol(TOK_DOT_DOT_DOT);
          }
        case 171: break;
        case 54: 
          { return symbol(TOK_EQ);
          }
        case 172: break;
        case 112: 
          { return symbol(TOK_NO_MASK);
          }
        case 173: break;
        case 97: 
          { return symbol(TOK_BREAK);
          }
        case 174: break;
        case 53: 
          { return symbol(TOK_DO);
          }
        case 175: break;
        case 83: 
          { return symbol(TOK_FOR);
          }
        case 176: break;
        case 42: 
          { return symbol(TOK_FLOAT, new Double(yytext().substring(0,yylength()-1)));
          }
        case 177: break;
        case 101: 
          { return symbol(TOK_FINAL_ID);
          }
        case 178: break;
        case 76: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character(yytext().charAt(0)));
          }
        case 179: break;
        case 93: 
          { return symbol(TOK_ELSE);
          }
        case 180: break;
        case 88: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\r'));
          }
        case 181: break;
        case 89: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\b'));
          }
        case 182: break;
        case 24: 
          { return symbol(QUESTION);
          }
        case 183: break;
        case 3: 
          { return symbol(DIV);
          }
        case 184: break;
        case 126: 
          { return symbol(TOK_PROTECTED);
          }
        case 185: break;
        case 66: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 186: break;
        case 43: 
          { return symbol(TOK_DOT_DOT);
          }
        case 187: break;
        case 30: 
          { return symbol(MOD);
          }
        case 188: break;
        case 7: 
          { return symbol(TOK_NUMBER, new Integer(yytext()));
          }
        case 189: break;
        case 100: 
          { return symbol(TOK_FLOAT);
          }
        case 190: break;
        case 60: 
          { return symbol(TOK_LAND);
          }
        case 191: break;
        case 12: 
          { return symbol(LPAREN);
          }
        case 192: break;
        case 105: 
          { return symbol(TOK_RETURN);
          }
        case 193: break;
        case 71: 
          { string.append( '\r' );
          }
        case 194: break;
        case 33: 
          { yybegin(YYINITIAL); return symbol(TOK_STRING, string.toString());
          }
        case 195: break;
        case 85: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\"'));
          }
        case 196: break;
        case 72: 
          { string.append( '\b' );
          }
        case 197: break;
        case 23: 
          { return symbol(COMP);
          }
        case 198: break;
        case 49: 
          { return symbol(TOK_RSH);
          }
        case 199: break;
        case 41: 
          { return symbol(TOK_FLOAT, new Float(yytext().substring(0,yylength()-1)));
          }
        case 200: break;
        case 32: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 201: break;
        case 86: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\''));
          }
        case 202: break;
        case 17: 
          { return curlysymbol(RBRACE);
          }
        case 203: break;
        case 68: 
          { string.append( '\"' );
          }
        case 204: break;
        case 87: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\\'));
          }
        case 205: break;
        case 19: 
          { return symbol(RBRACK);
          }
        case 206: break;
        case 20: 
          { return symbol(SEMICOLON);
          }
        case 207: break;
        case 115: 
          { return symbol(TOK_INHERIT);
          }
        case 208: break;
        case 124: 
          { return symbol(TOK_FUNCTION_ID);
          }
        case 209: break;
        case 55: 
          { return symbol(TOK_COLON_COLON);
          }
        case 210: break;
        case 69: 
          { string.append( '\'' );
          }
        case 211: break;
        case 70: 
          { string.append( '\\' );
          }
        case 212: break;
        case 26: 
          { return symbol(MINUS);
          }
        case 213: break;
        case 92: 
          { return symbol(TOK_NUMBER, new Long(parseLong(yytext().substring(2,yylength()-1),16)));
          }
        case 214: break;
        case 47: 
          { return symbol(TOK_LSH);
          }
        case 215: break;
        case 8: 
          { return symbol(DOT);
          }
        case 216: break;
        case 64: 
          { return symbol(TOK_MOD_EQ);
          }
        case 217: break;
        case 91: 
          { yybegin(YYINITIAL); return symbol(TOK_NUMBER, new Character('\f'));
          }
        case 218: break;
        case 107: 
          { return symbol(TOK_STATIC);
          }
        case 219: break;
        case 104: 
          { return symbol(TOK_WHILE);
          }
        case 220: break;
        case 25: 
          { return symbol(COLON);
          }
        case 221: break;
        case 50: 
          { return symbol(TOK_MULTISET_END);
          }
        case 222: break;
        case 51: 
          { return symbol(TOK_GE);
          }
        case 223: break;
        case 75: 
          { string.append( '\f' );
          }
        case 224: break;
        case 120: 
          { return symbol(TOK_VARIANT);
          }
        case 225: break;
        case 52: 
          { return symbol(TOK_IF);
          }
        case 226: break;
        case 106: 
          { return symbol(TOK_SSCANF);
          }
        case 227: break;
        case 16: 
          { return curlysymbol(LBRACE);
          }
        case 228: break;
        case 102: 
          { return symbol(TOK_MIXED_ID);
          }
        case 229: break;
        case 114: 
          { return symbol(TOK_PUBLIC);
          }
        case 230: break;
        case 5: 
          { return symbol(TOK_NOT);
          }
        case 231: break;
        case 4: 
          { return symbol(MULT);
          }
        case 232: break;
        case 2: 
          { /* ignore */
          }
        case 233: break;
        case 28: 
          { return symbol(AT);
          }
        case 234: break;
        case 18: 
          { return symbol(LBRACK);
          }
        case 235: break;
        case 31: 
          { string.append( yytext() );
          }
        case 236: break;
        case 67: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 237: break;
        case 38: 
          { return symbol(TOK_NUMBER, new Integer((int) parseLong(yytext(),8)));
          }
        case 238: break;
        case 98: 
          { return symbol(TOK_CATCH);
          }
        case 239: break;
        case 96: 
          { return symbol(TOK_ARRAY_ID);
          }
        case 240: break;
        case 63: 
          { return symbol(TOK_XOR_EQ);
          }
        case 241: break;
        case 125: 
          { return symbol(TOK_MULTISET_ID);
          }
        case 242: break;
        case 81: 
          { return symbol(TOK_RSH_EQ);
          }
        case 243: break;
        case 34: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 244: break;
        case 48: 
          { return symbol(TOK_LE);
          }
        case 245: break;
        case 21: 
          { return symbol(COMMA);
          }
        case 246: break;
        case 95: 
          { return symbol(TOK_VOID_ID);
          }
        case 247: break;
        case 36: 
          { return symbol(TOK_MULT_EQ);
          }
        case 248: break;
        case 82: 
          { return symbol(TOK_INT_ID);
          }
        case 249: break;
        case 77: 
          { return symbol(TOK_NUMBER, new Long(parseLong(yytext().substring(0,yylength()-1),8)));
          }
        case 250: break;
        case 37: 
          { return symbol(TOK_NE);
          }
        case 251: break;
        case 65: 
          { 
          }
        case 252: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
