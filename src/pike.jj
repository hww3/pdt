/**
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Modified by : Bill Welliver
 * Date: 8/2/05
 *
 * Original Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Pike grammar and actions that implement a front-end.
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
 // DEBUG_PARSER = true;
 // DEBUG_TOKEN_MANAGER = true;
 // DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(PikeParser)

import java.util.LinkedList;



public class PikeParser
{
static LinkedList typeParsingQueue = new LinkedList();
static LinkedList typeIdentifierQueue = new LinkedList();
static String var_def_type;
// modified main Andrea Gini 24/02/2002
// modified main. DW, 7/99
    public static void main (String [] args) {
        PikeParser parser;
        String filename = null;
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;
        LinkedList typeParsingQueue = new LinkedList();
        String var_def_type;
        
        if (args.length == 0)
        {
            System.out.println("Pike Parser Version 1.0:  Reading from standard input . . .");
            parser = new PikeParser(System.in);
        } else if (args.length == 1)
        {
            filename = args[0];
            System.out.println("Pike Parser Version 1.0:  Reading from file " + filename + " . . .");
            try
            {
                startTime = System.currentTimeMillis();
                parser = new PikeParser(new java.io.FileInputStream(filename));
                stopTime = System.currentTimeMillis();
                initTime = stopTime - startTime;
            } catch (java.io.FileNotFoundException e)
            {
                System.out.println("Pike Parser Version 1.0:  File " + filename + " not found.");
                return;
            }
        } else
        {
            System.out.println("Pike Parser Version 1.0:  Usage is one of:");
            System.out.println("         java PikeParser < inputfile");
            System.out.println("OR");
            System.out.println("         java PikeParser inputfile");
            return;
        }
        try
        {
            startTime = System.currentTimeMillis();
            parser.enable_tracing();
            parser.CompilationUnit();
            stopTime = System.currentTimeMillis();
            parseTime = stopTime - startTime;
            System.out.println("Pike Parser Version 1.0: ");
            System.out.println("   Pike program parsed " + filename + " successfully in " + (initTime + parseTime) + " ms.");
            System.out.println("      parser initialization time was " + initTime + " ms.");
            System.out.println("      parser parse time was " + parseTime + " ms.");
        } catch (ParseException e)
        {
            System.out.println(e.getMessage());
            System.out.println("Pike Parser Version 1.0:  Encountered errors during parse.");
        }
    }

}

PARSER_END(PikeParser)

TOKEN_MGR_DECLS :
{
  
}

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "//!" : IN_SINGLE_LINE_FORMAL_COMMENT
|
  <"/*!" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_FORMAL_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_SINGLE_LINE_FORMAL_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
< ARRAY: "array" >
| < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CLASS: "class" >
| < CONST: "constant" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < ELSE: "else" >
| < FINAL: "final" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < FUNCTION: "function" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPORT: "import" >
| < INHERIT: "inherit" >
| < INT: "int" >
| < MAPPING: "mapping" >
| < MIXED: "mixed" >
| < MULTISET: "multiset" >
| < OBJECT: "object" >
| < OPTIONAL: "optional" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "string" >
| < SWITCH: "switch" >
//| < THIS: "this" >
| < THROW: "throw" >
| < VOID: "void" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      
      
      ("#" (" ")* "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"")
      |
      ("\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"")
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "_",
       "a"-"z",
       "A"-"Z"
      ]
  >
|
  < DIGIT:
      [
        "0"-"9"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < OCTOTHORPE: "#" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < DOTDOT: ".." >
| < COLONCOLON: "::" >
| < INDIRECT: "->" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
}


/*****************************************
 * THE PIKE LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
{}
{
 Program()
 <EOF>
}

void Program() :
{}
{
  (Definition())+

}

void Definition() :
{}
{
	
  LOOKAHEAD(3)
  InheritDeclaration() 
  |
  LOOKAHEAD(3)
  ImportDeclaration() 
  |
  LOOKAHEAD(3)
  ConstantDeclaration()
  |
  LOOKAHEAD(400)
  FunctionDeclaration()
  |
  LOOKAHEAD(400)
  FunctionDefinition()
  |
  LOOKAHEAD(3)
  VariableDeclaration()
  |
  LOOKAHEAD(3)
  ClassDef()	 
}


void InheritDeclaration() :
{}
{
  Modifiers() "inherit" (ProgramSpecifier()) (":" <IDENTIFIER>)? ";"
}

void ImportDeclaration() :
{}
{
  Modifiers() "import" (ConstantIdentifier() | <STRING_LITERAL>) ";"
}

void ConstantDeclaration() :
{}
{
	Modifiers()
	"constant"
	ConstantNames()
	";"
}

void FunctionDeclaration() :
{}
{
  Modifiers() 
  Type()
  <IDENTIFIER>
  "("
  (Arguments() | ProtArguments())? 
  ")"
  ";"
}

void ConstantNames() :
{}
{
  ConstantName() ("," ConstantName())*	
}

void ConstantName() :
{}
{
  <IDENTIFIER>
  "=" Expression()  	
}

void Arguments() :
{}
{
	( (Argument() ("," Argument())* (Varargs())?) | Varargs() ) (",")?
}

void Argument() :
{}
{
  Type() <IDENTIFIER>	
}

void Varargs() :
{}
{
  Type() "..." <IDENTIFIER>	
}

void ProtArguments() :
{}
{
	( (Type() ("," Type())* (Type() "...")?) | (Type() "...") ) (",")?
}

void Type() :
{}
{
	IntType() 
	| 
	"string" 
	| 
	"float" 
	| 
	"program" 
	| 
	ObjectType() 
	| 
	ProgramSpecifier() 
	| 
	MappingType() 
	|
	ArrayType()
	|
	MultisetType()
	|
    FunctionType()
}

void IntType() :
{}
{
  "int" ( "(" ( (<DIGIT>)+ | ".." (<DIGIT>)+ | (<DIGIT>)+ ".." | (<DIGIT>)+ ".." (<DIGIT>)+ ) ")" )?	
}

void ObjectType() :
{}
{
  "object" ( "(" ProgramSpecifier() ")" )?	
}

void ProgramSpecifier() :
{}
{
	StringConstant() | ConstantIdentifier()
}

void MappingType() : 
{}
{
  "mapping" ( "(" Type() ":" Type() ")" )?	
}

void ArrayType() :
{}
{
  "array" ( "(" Type() ")" )?
}

void MultisetType() :
{}
{
  "multiset" ( "(" Type() ")" )?	
}

void FunctionType() :
{}
{
  "function" ( "(" Type() ( "," Type() )* ("...")? ":" Type() ")" )?
}

void StringConstant() :
{}
{
	<STRING_LITERAL>
}

void ConstantIdentifier() :
{}
{
	( "." )? <IDENTIFIER> ( "." <IDENTIFIER> )*
}

void FunctionDefinition() :
{}
{
	Modifiers()
    Type()
    <IDENTIFIER>
    "("
    (Arguments())?
    ")"
    Block()
}

void VariableDeclaration() :
{}
{
	Modifiers()
	Type()
	VariableNames()
	";"
}
	
void VariableNames() :
{}
{
	VariableName() ( "," VariableName() )*
}

void VariableName() :
{}
{
  	<IDENTIFIER> ( "=" Expression2() )?
}
/*
 * Declaration syntax follows.
 */

void ClassDef() :
{}
{
  Modifiers()
  Class()
  ( ";" )?
}

void Class() :
{}
{
	"class" (<IDENTIFIER>)? ( "(" Arguments() ")" )? "{" Program() "}"
}

void Modifiers() :
{}
{
	( "private" | "static" | "public" | "optional" | "final" | "inline" | "local" | "nomask" | "protected" | "variant" )*
}


void Block() :
{}
{
   "{" Statement() "}" 	
}

void Statement() :
{}
{
	// TODO: is this a correct interpretation of the BNF?
   (Expression() ";")	
   | 
   Cond() 
   | 
   While() 
   | 
   DoWhile() 
   | 
   For() 
   | 
   Switch() 
   | 
   Return() 
   | 
   Block() 
   | 
   Foreach() 
   | 
   ";"
}

void Cond() :
{}
{
  "if" Statement() ( "else" Statement() )?	
}

void While() :
{}
{
  "while" "(" Expression() ")" Statement()	
}

void DoWhile() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"	
}

void For() :
{}
{
	"for" "(" (Expression())? ";" (Expression())? ";" (Expression())? ")"
}

void Switch() :
{}
{
	"switch" "(" Expression() ")" CaseBlock()
}

void Return() :
{}
{
	"return" Expression() ";"
}

void Foreach() :
{}
{
	"foreach" "(" Expression() ";" (Expression())? ";" (Expression6()) ")" Statement()
}

void CaseBlock() :
{}
{
  	"{" ( Case() | Default() | Statement() | Break() | Continue() )* "}"
}

void Case() :
{}
{
	"case" Expression() [ ".." Expression() ] ":"
}

void Default() :
{}
{
	"default" ":"
}

void Break() :
{}
{
	"break" ";"
}

void Continue() :
{}
{
	"continue" ";"
}

void Expression() :
{}
{
  Expression2() ( "," Expression2() )*	
}

void Expression2() :
{}
{
  ( Lvalue() ("=" | "+=" | "*=" | "/=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "%=" ) )*	Expression3()
}

void Expression3() :
{}
{
	Expression4() "?" Expression3() ":" Expression3()
}

void Expression4() :
{}
{
	( Expression5() ( "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | ">" | "<" | ">=" | "<=" | "<<" | ">>" | "+" | "*" | "/" | "%" ) )* Expression5()
}

void Expression5() : 
{}
{
	Expression6() | ("(" Type() ")" Expression5()) | ("--" Expression6()) | ("++" Expression6()) | (Expression6() "--") | (Expression6() "++") | ("~" Expression5()) | ("-" Expression5())
}

void Expression6() :
{}
{
	<STRING> | <INT> | <FLOAT> | Catch() | Gauge() | "typeof" | Sscanf() | Lambda() | Class() | ConstantIdentifier() | Call() | Index() | Mapping() | Multiset() | Array() | Parenthesis() | Arrow()
}

void Catch() :
{}
{
	"catch" ( ( "(" Expression() ")" ) | Block() )	
}

void Gauge() :
{}
{
	"gauge" ( ("(" Expression() ")") | Block() )
}

void Sscanf() :
{}
{
  	"sscanf" "(" Expression2() "," Expression2() ( "," Lvalue() )* ")"
}

void Call() :
{}
{
	Expression6() "(" ExpressionList() ")"
}

void Lambda() :
{}
{
	"lambda" "(" ( Arguments() )? ")" Block()
}

void Index() :
{}
{
	Expression6() "[" ( Expression() | ( ".." Expression() ) | ( Expression() ".." ) | ( Expression() ".." Expression() ) ) "]"
}

void Mapping() :
{}
{
	"([" ( Expression() ":" Expression() ( "," Expression() ":" Expression() )* ( "," )? )? "])"
}

void Multiset() :
{}
{
	"(<" ExpressionList() ">)"
}

void Array() :
{}
{
	"({" ExpressionList() "})"
}

void Parenthesis() :
{}
{
	"(" Expression() ")"
}

void Arrow() :
{}
{
	Expression6() "->" <IDENTIFIER>
}

void ExpressionList() :
{}
{
	( SpliceExpression() ( "," SpliceExpression() )* ( "," )? )?
}

void SpliceExpression() :
{}
{
	("@")? Expression2()
}

void Lvalue() :
{}
{
  	Expression6() | (Type() <IDENTIFIER>) | ("[" ( Lvalue() ( "," Lvalue() )* (",")? )? "]")
}

